#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'rubygems'
require 'cat_esri'
require 'trollop'

crawler = CatEsri::Crawler.new(STDOUT)
ARGV << "-h" if ARGV.size == 0 #force help message if no args

opts = Trollop::options do
  version "LogicalCat: cat_esri #{CatEsri::VERSION} (c) 2012 LogicalCat LLC"
  banner <<-EOS
o-----------------------------------------------------------------------------o
| Collect text content and file attributes from ESRI shapefiles, Personal     |
| Geodatabases (windows only) and File Geodatabases (bit of a hack)           |
o-----------------------------------------------------------------------------o
EOS

  opt :path, "|#{File.expand_path('../../gdal', __FILE__)}|Network path to scan", :type => String
  opt :logfile, "Log crawl activity to file", :type => String
  opt :timeout, "Timeout for some long-running tasks", :default => 10
  opt :format, "Output format: csv or sqlite3", :type => String, :default => 'sqlite3'
  opt :xitems, "Maximum items per outfile", :default => 50000
  opt :outdir, "Write crawl results to directory", :type => String
  opt :esrigdb, "Include ESRI personal and file geodatabases", :default => false
  opt :ggxlayer, "Include GeoAtlas Layers in shapefile scans", :default => false
  opt :label, "Name used as label for this crawl", :short => 'n', :type => String, :default => 'unlabeled'
  opt :quell, "Exclude crawl subdirectories", :type => String
  opt :group_name, "Group Name assigned to this data", :type => String, :short => 'G'
  opt :cfg_cipher, "Encryption/decryption cipher key", :type => String, :short => 'C'
  opt :cfg_path, "Storage configuration file", :type => String, :short => 'F'
  opt :skip_upload, "Cloud format without upload", :default => false, :short => 'S'
  opt :elastic_url, "Local ElasticSearch URL", :type => String, :default => 'http://localhost:9200/lc_index', :short => 'E'

end

Trollop::die :path, "Cannot be blank" if opts[:path] == nil
Trollop::die :label, "Cannot be blank" if opts[:label] == nil
Trollop::die :group_name, "Cannot be blank" if opts[:group_name] == nil
Trollop::die :path, "Path must exist" unless File.exist?(opts[:path])
Trollop::die :format, "Unknown format type: '#{opts[:format]}'" unless CatEsri::FORMATS.include?(opts[:format])

# set gdal environment...
ENV["GDAL_DATA"] = File.expand_path('../../gdal/data',__FILE__)
$LOAD_PATH.unshift File.expand_path('../../gdal/apps',__FILE__)

opts[:path] = File.expand_path(opts[:path]) if opts[:path]
opts[:logfile] = File.expand_path(opts[:logfile]) if opts[:logfile]
opts[:outfile] = File.expand_path(opts[:outfile]) if opts[:outfile]

if opts[:outdir] == nil
  Trollop::die :cfg_cipher, "Encryption/decryption cipher key must exist" if opts[:cfg_cipher] == nil
  Trollop::die :cfg_path, "Storage configuration file must exist" if opts[:cfg_path] == nil
  opts[:format] = 'cloud'
else
  Trollop::die :outdir, "Directory must exist" unless File.exists?(opts[:outdir])
end

if opts[:logfile] =~ /\\/ || opts[:logfile] =~ /\//
  Trollop::die :logfile, "Invalid logfile path." unless File.exist?(File.dirname(File.expand_path(opts[:logfile])))
end

crawler.options = opts
crawler.scan
